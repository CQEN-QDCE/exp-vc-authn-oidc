kind: Template
apiVersion: template.openshift.io/v1
metadata:
  annotations:
    description: Build template for an Aries Cloudagent.
    tags: python, hyperledger
    iconClass: icon-python
  name: "${PREFIX}${NAME}-build-template"
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
  spec:
    runPolicy: Serial
    source:
      type: Git
      git:
        ref: "${GIT_REF}"
        uri: "${GIT_REPO_URL}"
      contextDir: "${SOURCE_CONTEXT_DIR}"
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: "${DOCKER_FILE_PATH}"
    output:
      to:
        kind: ImageStreamTag
        name: "${PREFIX}${NAME}:${OUTPUT_IMAGE_TAG}"
    resources:
      requests:
        cpu: "${CPU_REQUEST}"
        memory: "${MEMORY_REQUEST}"
      limits:
        cpu: "${CPU_LIMIT}"
        memory: "${MEMORY_LIMIT}"
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    name: ${PREFIX}${NAME}
    labels:
      name: ${PREFIX}${NAME}
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  spec:
    ports:
    - name: ${NAME}-admin
      port: ${{AGENT_ADMIN_PORT}}
      protocol: TCP
      targetPort: ${{AGENT_ADMIN_PORT}}
    - name: ${NAME}-http
      port: ${{AGENT_HTTP_PORT}}
      protocol: TCP
      targetPort: ${{AGENT_HTTP_PORT}}
    selector:
      name: ${PREFIX}${NAME}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${PREFIX}${NAME}
    labels:
      name: ${PREFIX}${NAME}
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
    annotations:
      haproxy.router.openshift.io/timeout: ${ROUTE_TIMEOUT}
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: ${NAME}-http
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${PREFIX}${NAME}
      weight: 100
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
    labels:
      name: ${PREFIX}${NAME}
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  stringData:
    key: ${WALLET_KEY}
    seed: ${WALLET_SEED}
    did: ${WALLET_DID}
  type: Opaque
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${PREFIX}${NAME}
    labels:
      name: ${PREFIX}${NAME}
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  stringData:
    admin-api-key: ${ADMIN_API_KEY}
  type: Opaque
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${PREFIX}${NAME}
    labels:
      name: ${PREFIX}${NAME}
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  spec:
    replicas: 1
    selector:
      name: ${PREFIX}${NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        name: ${PREFIX}${NAME}
        labels:
          name: ${PREFIX}${NAME}
          app: ${APP_NAME}
        app-group: ${APP_GROUP}
        role: ${PREFIX}${ROLE}
        env: ${TAG_NAME}
      spec:
        containers:
          - name: ${PREFIX}${NAME}
            command:
              # Note:
              #  - The wallet-name cannot contain '-'s.
              - bash
              - -c
              - $(echo aca-py start
                --inbound-transport http '0.0.0.0' ${HTTP_INTERFACE_PORT}
                $([ ! -z "${AGENT_ENDPOINT}" ] && echo "--endpoint ${AGENT_ENDPOINT}" || echo "")
                --outbound-transport http
                --genesis-url "${GENESIS_URL}"
                $(echo "${CONTROLLER_WEBHOOK_URL:+--webhook-url ${CONTROLLER_WEBHOOK_URL%/}${CONTROLLER_API_KEY:+/${CONTROLLER_API_KEY}}}")
                --auto-accept-invites
                --auto-accept-requests
                --auto-ping-connection
                --auto-respond-messages
                --auto-respond-credential-offer
                --auto-verify-presentation
                --wallet-type 'indy'
                --wallet-name "$(echo ${AGENT_WALLET_NAME} | tr '[:upper:]' '[:lower:]' | sed "s~-~_~g")"
                --wallet-key "${WALLET_ENCRYPTION_KEY}"
                --wallet-storage-type "${WALLET_TYPE}"
                --wallet-storage-config "$(eval echo \"${WALLET_STORAGE_CONFIGURATION}\")"
                --wallet-storage-creds "$(eval echo \"${WALLET_STORAGE_CREDENTIALS}\")"
                $([ ! -z "${INDY_WALLET_SEED}" ] && echo "--seed ${INDY_WALLET_SEED}" || echo "")
                --admin '0.0.0.0' ${ADMIN_INTERFACE_PORT}
                $([ ! -z "${AGENT_ADMIN_API_KEY}" ] && echo "--admin-api-key ${AGENT_ADMIN_API_KEY}" || echo "--admin-insecure-mode")
                --label "${AGENT_NAME}"
                --log-level ${AGENT_LOG_LEVEL}
                $([ ! -z "${TIMING}" ] && echo "--timing" || echo "")
                $([ ! -z "${READ_ONLY_LEDGER}" ] && echo "--read-only-ledger" || echo ""));
            env:
              - name: GENESIS_URL
                value: ${GENESIS_FILE_URL}
              - name: AGENT_WALLET_NAME
                value: ${PREFIX}${NAME}-wallet
              - name: WALLET_TYPE
                value: ${WALLET_STORAGE_TYPE}
              - name: POSTGRESQL_WALLET_HOST
                value: ${PREFIX}${WALLET_HOST}
              - name: POSTGRESQL_WALLET_PORT
                value: ${WALLET_HOST_PORT}
              - name: WALLET_STORAGE_CONFIGURATION
                value: ${WALLET_STORAGE_CONFIG}
              - name: WALLET_STORAGE_CREDENTIALS
                value: ${WALLET_STORAGE_CREDS}
              - name: POSTGRESQL_WALLET_USER
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_HOST}
                    key: database-user
              - name: POSTGRESQL_WALLET_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_HOST}
                    key: database-password
              - name: POSTGRESQL_WALLET_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_HOST}
                    key: admin-password
              - name: WALLET_ENCRYPTION_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: key
              - name: INDY_WALLET_SEED
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: seed
              - name: WALLET_DID
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${WALLET_CREDENTIAL_STORE_NAME}
                    key: did
              - name: CONTROLLER_WEBHOOK_URL
                value: ${WEBHOOK_URL}
              - name: CONTROLLER_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}controller
                    key: controller-api-key
              - name: HTTP_INTERFACE_PORT
                value: ${AGENT_HTTP_PORT}
              - name: ADMIN_INTERFACE_PORT
                value: ${AGENT_ADMIN_PORT}
              - name: AGENT_ADMIN_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${PREFIX}${NAME}
                    key: admin-api-key
              - name: AGENT_NAME
                value: ${AGENT_LABEL_NAME}
              - name: AGENT_ENDPOINT
                value: 'Replace with agent route location'
              - name: AGENT_LOG_LEVEL
                value: ${LOG_LEVEL}
              - name: TIMING
                value: ${AGENT_TIMING}
              - name: READ_ONLY_LEDGER
                value: ${AGENT_READ_ONLY_LEDGER}
            image:
            ports:
              - containerPort: ${{AGENT_ADMIN_PORT}}
                protocol: TCP
              - containerPort: ${{AGENT_HTTP_PORT}}
                protocol: TCP
            readinessProbe:
              timeoutSeconds: 30
              initialDelaySeconds: 3
              exec:
                command:
                  - bash
                  - "-c"
                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/ready" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
            livenessProbe:
              timeoutSeconds: 30
              initialDelaySeconds: 300
              exec:
                command:
                  - bash
                  - "-c"
                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/live" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
            imagePullPolicy: IfNotPresent
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${PREFIX}${NAME}
          from:
            kind: ImageStreamTag
            name: ${PREFIX}${NAME}:${OUTPUT_IMAGE_TAG}
- kind: NetworkSecurityPolicy
  apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  metadata:
    name: custom-${APP_NAME}-${NAME}-to-external-network
    labels:
      name: custom-${APP_NAME}-${NAME}-to-external-network
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  spec:
    description: |
      Allow the agent to access the internet.
    source:
      - - role=${PREFIX}${ROLE}
        - app=${APP_NAME}
        - env=${TAG_NAME}
        - $namespace=${NAMESPACE_NAME}-${TAG_NAME}
    destination:
      - - ext:network=any
- kind: NetworkSecurityPolicy
  apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  metadata:
    name: custom-${APP_NAME}-${NAME}-policy
    labels:
      name: custom-${APP_NAME}-${NAME}-policy
      app: ${APP_NAME}
      app-group: ${APP_GROUP}
      role: ${PREFIX}${ROLE}
      env: ${TAG_NAME}
  spec:
    description: |
      Allow the agent to talk to either the wallet or controller micro services.
    source:
      - - role=${PREFIX}${ROLE}
        - app=${APP_NAME}
        - env=${TAG_NAME}
        - $namespace=${NAMESPACE_NAME}-${TAG_NAME}
    destination:
      - - role=${PREFIX}wallet
        - app=${APP_NAME}
        - env=${TAG_NAME}
        - $namespace=${NAMESPACE_NAME}-${TAG_NAME}
      - - role=${PREFIX}controller
        - app=${APP_NAME}
        - env=${TAG_NAME}
        - $namespace=${NAMESPACE_NAME}-${TAG_NAME}
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the objects defined in this template.  You
    should keep this as default unless your know what your doing.
  required: true
  value: agent
- name: APP_NAME
  displayName: App Name
  description: Used to group components together in the OpenShift console.
  required: true
  value: vc-authn-oidc
- name: APP_GROUP
  displayName: App Group
  description: The name assigned to all of the components in this project.
  required: true
  value: vc-authn-oidc
- name: PREFIX
  displayName: Prefix
  description: A name prefix used for all objects
  required: false
  value: vc-authn-
- name: GIT_REPO_URL
  displayName: Git Repo URL
  description: The URL to your GIT repo, don't use the this default unless your just
    experimenting.
  required: true
  value: https://github.com/bcgov/vc-authn-oidc.git
- name: GIT_REF
  displayName: Git Reference
  description: The git reference or branch.
  required: true
  value: master
- name: SOURCE_CONTEXT_DIR
  displayName: Source Context Directory
  description: The source context directory.
  required: true
  value: docker/agent
- name: DOCKER_FILE_PATH
  displayName: Docker File Path
  description: The path to the docker file defining the build.
  required: false
  value: Dockerfile
- name: OUTPUT_IMAGE_TAG
  displayName: Output Image Tag
  description: The tag given to the built image.
  required: true
  value: latest
- name: CPU_REQUEST
  displayName: Resources CPU Request
  description: The resources CPU request (in cores) for this build.
  required: true
  value: 10m
- name: CPU_LIMIT
  displayName: Resources CPU Limit
  description: The resources CPU limit (in cores) for this build.
  required: true
  value: 750m
- name: MEMORY_REQUEST
  displayName: Resources Memory Request
  description: The resources Memory request (in Mi, Gi, etc) for this build.
  required: true
  value: 10Mi
- name: MEMORY_LIMIT
  displayName: Resources Memory Limit
  description: The resources Memory limit (in Mi, Gi, etc) for this build.
  required: true
  value: 500Mi
- name: NAMESPACE_NAME
  displayName: Namespace Name
  description: The name of the namespace being deployed to.
  required: true
  value: admgjk
- name: ROLE
  displayName: Role
  description: The role of this service within the application - used for Network Policies.
  required: true
  value: agent
- name: APPLICATION_DOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the service, if left blank a value will be defaulted.
  required: false
  value:
- name: ROUTE_TIMEOUT
  displayName: Route Timeout
  description: The timeout for the application route.  When this timeout is exceeded the application's route will respond with a 504 Gateway Timeout error.
  required: true
  value: 120s
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod.
  required: true
  value: dev
- name: AGENT_LABEL_NAME
  displayName: Agent Label/Name
  description: The label/name of the agent
  required: true
  value: vc-authn-agent
- name: WEBHOOK_URL
  displayName: Webhook URL
  description: The webhook endpoint
  required: true
  value: 'Replace with controller route location'
- name: AGENT_ADMIN_PORT
  displayName: Agent Admin Port
  description: The admin port on which the service will listen.
  required: true
  value: "8024"
- name: ADMIN_API_KEY
  displayName: Agent Admin API Key
  description: The key used to authenticate client requests to the admin api.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: AGENT_HTTP_PORT
  displayName: Agent Http Port
  description: The http port on which the service will listen.
  required: true
  value: "8021"
- name: GENESIS_FILE_URL
  displayName: Genesis File URL
  description: The URL from which the genesis file can be downloaded.
  required: true
  value: http://vonx.pocquebec.org:9000/genesis
- name: LOG_LEVEL
  displayName: Log Level
  description: The logging level for the agent.
  required: true
  value: WARNING
- name: AGENT_TIMING
  displayName: Collect agent timing information.
  description: Enable/Disable collection of agent timing information.  Controls the inclusion/exclusion of the agent '--timing' startup parameter.  Defaults to disabled.
  required: false
  value: ""
- name: AGENT_READ_ONLY_LEDGER
  displayName: Set read only ledger flag.
  description: Enable/Disable the read only ledger flag.  Controls the inclusion/exclusion of the agent '--read-only-ledger' startup parameter.  Defaults to disabled.
  required: false
  value: ''
- name: WALLET_STORAGE_TYPE
  displayName: Wallet Storage Type
  description:
    The wallet storage type.  Your choice of 'postgres' or 'sqlite' at
    the moment.  If not defined, defaults to 'sqlite' for compatibility
  required: false
  value: postgres_storage
- name: WALLET_HOST
  displayName: PostgreSql Wallet Hostname
  required: true
  description: Hostname of the deployed database hosting the wallet.  Only used when WALLET_STORAGE_TYPE = postgres_storage.
  value: wallet
- name: WALLET_HOST_PORT
  displayName: PostgreSql Wallet Port
  required: true
  description: The port number of the deployed database hosting the wallet.  Only used when WALLET_STORAGE_TYPE = postgres_storage.
  value: "5432"
- name: WALLET_STORAGE_CONFIG
  displayName: Wallet Storage Configuration
  required: true
  description: Wallet storage configuration
  value: '{\"url\":\"${POSTGRESQL_WALLET_HOST}:${POSTGRESQL_WALLET_PORT}\",\"max_connections\":5}'
- name: WALLET_STORAGE_CREDS
  displayName: Wallet Storage Credential Configuration
  required: true
  description: Wallet storage credential configuration
  value: '{\"account\":\"${POSTGRESQL_WALLET_USER}\",\"password\":\"${POSTGRESQL_WALLET_PASSWORD}\",\"admin_account\":\"postgres\",\"admin_password\":\"${POSTGRESQL_WALLET_ADMIN_PASSWORD}\"}'
- name: WALLET_CREDENTIAL_STORE_NAME
  displayName: Wallet Credential Store Name
  description:
    The name of the wallet credential store (aka The name of the secret
    that contains the wallet credentials).
  required: true
  value: agent-wallet-credentials
- name: WALLET_KEY
  displayName: Wallet Encryption Key
  description: The encryption key to be used for the wallets.  Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: WALLET_SEED
  displayName: Indy Wallet Seed
  description: The Seed used for the indy wallet.  Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: WALLET_DID
  displayName: Indy Wallet DID
  description: The DID associated to the indy wallet.  Needs to be basee64 encoded.
  required: false
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"