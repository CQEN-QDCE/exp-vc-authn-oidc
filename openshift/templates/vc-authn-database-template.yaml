kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: "${PREFIX}${NAME}-build-template"
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
  spec:
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: "${GIT_REPO_URL}"
        ref: "${GIT_REF}"
      contextDir: "${SOURCE_CONTEXT_DIR}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: "${SOURCE_IMAGE_KIND}"
          name: "${FROM_SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_TAG}"
    output:
      to:
        kind: ImageStreamTag
        name: "${PREFIX}${NAME}:${OUTPUT_IMAGE_TAG}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    generation: 1
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
      role: "${PREFIX}${ROLE}"
      env: "${TAG_NAME}"
      template: "${PREFIX}${NAME}-persistent-template"
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${PREFIX}${NAME}"
        from:
          kind: ImageStreamTag
          name: "${SOURCE_IMAGE_NAME}:${OUTPUT_IMAGE_TAG}"
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
      role: "${PREFIX}${ROLE}"
      env: "${TAG_NAME}"
    template:
      metadata:
        labels:
          name: "${PREFIX}${NAME}"
          app: "${APP_NAME}"
          app-group: "${APP_GROUP}"
          role: "${PREFIX}${ROLE}"
          env: "${TAG_NAME}"
      spec:
        volumes:
        - name: "${PREFIX}${NAME}-data"
          persistentVolumeClaim:
            claimName: "${PREFIX}${NAME}"
        containers:
        - name: "${PREFIX}${NAME}"
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${PREFIX}${NAME}"
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${PREFIX}${NAME}"
                key: database-password
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${PREFIX}${NAME}"
                key: admin-password
          - name: POSTGRESQL_DATABASE
            value: "${POSTGRESQL_DATABASE_NAME}"
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: "${PREFIX}${NAME}-data"
            mountPath: "${MOUNT_PATH}"
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
               'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
      role: "${PREFIX}${ROLE}"
      env: "${TAG_NAME}"
  spec:
    storageClassName: "${PERSISTENT_VOLUME_CLASS}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${PERSISTENT_VOLUME_SIZE}"
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
      role: "${PREFIX}${ROLE}"
      env: "${TAG_NAME}"
  stringData:
    admin-password: "${POSTGRESQL_ADMIN_PASSWORD}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-user: "${POSTGRESQL_USER}"
  type: Opaque
- kind: Service
  apiVersion: v1
  metadata:
    name: "${PREFIX}${NAME}"
    labels:
      name: "${PREFIX}${NAME}"
      app: "${APP_NAME}"
      app-group: "${APP_GROUP}"
      role: "${PREFIX}${ROLE}"
      env: "${TAG_NAME}"
      template: "${PREFIX}${NAME}-persistent-template"
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="${PREFIX}${NAME}")].port}
  spec:
    ports:
    - name: "${PREFIX}${NAME}"
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${PREFIX}${NAME}"
    type: ClusterIP
    sessionAffinity: None
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the resources defined in this template.
  required: true
  value: database
- name: APP_NAME
  displayName: App Name
  description: Used to group components together in the OpenShift console.
  required: true
  value: vc-authn-oidc
- name: APP_GROUP
  displayName: App Group
  description: The name assigned to all of the components in this project.
  required: true
  value: vc-authn-oidc
- name: PREFIX
  displayName: Prefix
  description: A name prefix used for all objects
  required: false
  value: vc-authn-
- name: ROLE
  displayName: Role
  description: The role of this service within the application - used for Network Policies
  required: true
  value: db
- name: GIT_REPO_URL
  displayName: Git Repo URL
  description: The URL to your GIT repo.
  required: true
  value: https://github.com/bcgov/vc-authn-oidc.git
- name: GIT_REF
  displayName: Git Reference
  description: The git reference or branch.
  required: true
  value: master
- name: SOURCE_CONTEXT_DIR
  displayName: Source Context Directory
  description: The source context directory.
  required: false
  value: database/config
- name: SOURCE_IMAGE_KIND
  displayName: Source Image Kind
  description: The 'kind' (type) of the  source image; typically ImageStreamTag, or
    DockerImage.
  required: true
  value: DockerImage
- name: FROM_SOURCE_IMAGE_NAME
  displayName: Source Image Name
  required: true
  description: The name of the source image.
  value: registry.access.redhat.com/rhscl/postgresql-10-rhel7
- name: SOURCE_IMAGE_TAG
  displayName: Source Image Tag
  required: true
  description: The tag of the source image.
  value: latest
- name: OUTPUT_IMAGE_TAG
  displayName: Output Image Tag
  description: The tag given to the built image.
  required: true
  value: latest
- name: SOURCE_IMAGE_NAME
  displayName: Source Image Name
  description: The name of the image to use for this resource.
  required: true
  value: vc-authn-database
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
  value: dev
- name: POSTGRESQL_DATABASE_NAME
  displayName: PostgreSQL Database Name
  description: The name of the PostgreSQL database.
  required: true
  value: vc_authn
- name: POSTGRESQL_USER
  displayName: PostgreSQL Connection Username
  description: Username for PostgreSQL user that will be used for accessing the database. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{10}"
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Connection Password
  description: Password for the PostgreSQL connection user. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL Admin Password
  description: Password for the 'postgres' PostgreSQL administrative account. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: MOUNT_PATH
  displayName: Mount Path
  description: The path to mount the persistent volume.
  required: true
  value: "/var/lib/pgsql/data"
- name: PERSISTENT_VOLUME_SIZE
  displayName: Persistent Volume Size
  description: The size of the persistent volume , e.g. 512Mi, 1Gi, 2Gi.
  required: true
  value: 1Gi
- name: PERSISTENT_VOLUME_CLASS
  displayName: Persistent Volume Class name
  description: The class of the volume.
  required: true
  value: ocs-storagecluster-ceph-rbd
- name: CPU_REQUEST
  displayName: Resources CPU Request
  description: The resources CPU request (in cores) for this build.
  required: true
  value: 10m
- name: CPU_LIMIT
  displayName: Resources CPU Limit
  description: The resources CPU limit (in cores) for this build.
  required: true
  value: 1000m
- name: MEMORY_REQUEST
  displayName: Resources Memory Request
  description: The resources Memory request (in Mi, Gi, etc) for this build.
  required: true
  value: 10Mi
- name: MEMORY_LIMIT
  displayName: Resources Memory Limit
  description: The resources Memory limit (in Mi, Gi, etc) for this build.
  required: true
  value: 128Mi
